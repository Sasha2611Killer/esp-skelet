local ESP = {}

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

-- Settings
local ESP_SETTINGS = {
    Enabled = false,
    Components = {
        Skeleton = {
            Enabled = false,
            Color = Color3.new(1, 0, 0),
            Thickness = 2,
            TeamCheck = false,
            VisibleOnly = true
        },
        Name = {
            Enabled = false,
            Color = Color3.new(1, 1, 1),
            ShowDistance = true,
            Size = 14,
            Outline = true,
            OutlineColor = Color3.new(0, 0, 0),
            Offset = Vector3.new(0, 2, 0) -- 3D offset from head
        },
        Box = {
            Enabled = false,
            Color = Color3.new(1, 1, 1),
            Thickness = 1,
            TeamCheck = false,
            VisibleOnly = true,
            FillTransparency = 1
        }
    }
}

-- Cache
local LocalPlayer = Players.LocalPlayer
local Skeletons = {}

-- Constants
local R15_JOINTS = {
    Head = "Head",
    UpperTorso = "UpperTorso",
    LowerTorso = "LowerTorso",
    LeftUpperArm = "LeftUpperArm",
    LeftLowerArm = "LeftLowerArm",
    LeftHand = "LeftHand",
    RightUpperArm = "RightUpperArm",
    RightLowerArm = "RightLowerArm",
    RightHand = "RightHand",
    LeftUpperLeg = "LeftUpperLeg",
    LeftLowerLeg = "LeftLowerLeg",
    RightUpperLeg = "RightUpperLeg",
    RightLowerLeg = "RightLowerLeg"
}

local R15_CONNECTIONS = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "LowerTorso"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"}
}

local R6_JOINTS = {
    Head = "Head",
    Torso = "Torso",
    LeftArm = "Left Arm",
    RightArm = "Right Arm",
    LeftLeg = "Left Leg",
    RightLeg = "Right Leg"
}

local R6_CONNECTIONS = {
    {"Head", "Torso"},
    {"Torso", "LeftArm"},
    {"Torso", "RightArm"},
    {"Torso", "LeftLeg"},
    {"Torso", "RightLeg"}
}

-- Utility functions
local function IsPartVisible(part, character)
    if not part then return false end
    local cameraPos = Camera.CFrame.Position
    local ray = Ray.new(cameraPos, (part.Position - cameraPos).Unit * 1000)
    local hit = workspace:FindPartOnRayWithIgnoreList(ray, {LocalPlayer.Character})
    return hit == nil or hit:IsDescendantOf(character)
end

local function GetPlayerColor(plr, component)
    local settings = ESP_SETTINGS.Components[component]
    if settings.TeamCheck and plr.Team then
        return plr.TeamColor.Color
    end
    return settings.Color
end

local function Draw3DLine(from, to, color, thickness, parentGui)
    local part = Instance.new("Part")
    part.Anchored = true
    part.CanCollide = false
    part.Transparency = 1
    part.Size = Vector3.new(thickness, thickness, (from - to).Magnitude)
    part.CFrame = CFrame.new((from + to)/2, to)
    part.Color = color
    
    local boxHandleAdornment = Instance.new("BoxHandleAdornment")
    boxHandleAdornment.Adornee = part
    boxHandleAdornment.AlwaysOnTop = true
    boxHandleAdornment.ZIndex = 10
    boxHandleAdornment.Size = part.Size
    boxHandleAdornment.Color3 = color
    boxHandleAdornment.Transparency = 0
    boxHandleAdornment.Parent = parentGui
    
    return {Part = part, Adornment = boxHandleAdornment}
end

local function Draw3DText(text, position, color, size, parentGui)
    local billboard = Instance.new("BillboardGui")
    billboard.AlwaysOnTop = true
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = position
    billboard.Adornee = parentGui
    billboard.Parent = parentGui
    
    local textLabel = Instance.new("TextLabel")
    textLabel.BackgroundTransparency = 1
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Text = text
    textLabel.TextColor3 = color
    textLabel.TextSize = size
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Parent = billboard
    
    return billboard
end

-- Update functions
local function UpdateSkeleton(plr, skeleton)
    if not ESP_SETTINGS.Enabled then
        for _, obj in pairs(skeleton) do
            if obj.Adornment then obj.Adornment:Destroy() end
            if obj.Part then obj.Part:Destroy() end
            if obj.Billboard then obj.Billboard:Destroy() end
        end
        return
    end

    local character = plr.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        for _, obj in pairs(skeleton) do
            if obj.Adornment then obj.Adornment:Destroy() end
            if obj.Part then obj.Part:Destroy() end
            if obj.Billboard then obj.Billboard:Destroy() end
        end
        return
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    -- Create parent GUI if not exists
    if not skeleton.ParentGui then
        skeleton.ParentGui = Instance.new("Folder")
        skeleton.ParentGui.Name = plr.Name.."_ESP"
        skeleton.ParentGui.Parent = workspace
    end

    -- Clear old drawings
    for _, obj in pairs(skeleton) do
        if obj.Adornment then obj.Adornment:Destroy() end
        if obj.Part then obj.Part:Destroy() end
        if obj.Billboard then obj.Billboard:Destroy() end
    end
    skeleton.Drawing = {}

    -- Skeleton update
    if ESP_SETTINGS.Components.Skeleton.Enabled then
        local joints, connections

        if humanoid.RigType == Enum.HumanoidRigType.R15 then
            joints = R15_JOINTS
            connections = R15_CONNECTIONS
        else
            joints = R6_JOINTS
            connections = R6_CONNECTIONS
        end

        -- Cache joint objects
        local jointObjects = {}
        for name, jointName in pairs(joints) do
            jointObjects[name] = character:FindFirstChild(jointName)
        end

        for index, connection in ipairs(connections) do
            local jointA = jointObjects[connection[1]]
            local jointB = jointObjects[connection[2]]

            if jointA and jointB then
                local visible = not ESP_SETTINGS.Components.Skeleton.VisibleOnly or 
                               (IsPartVisible(jointA, character) and IsPartVisible(jointB, character))
                
                if visible then
                    local line = Draw3DLine(
                        jointA.Position,
                        jointB.Position,
                        GetPlayerColor(plr, "Skeleton"),
                        ESP_SETTINGS.Components.Skeleton.Thickness,
                        skeleton.ParentGui
                    )
                    table.insert(skeleton.Drawing, line)
                end
            end
        end
    end

    -- Box ESP
    if ESP_SETTINGS.Components.Box.Enabled then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local visible = not ESP_SETTINGS.Components.Box.VisibleOnly or IsPartVisible(rootPart, character)
            
            if visible then
                local torsoName = humanoid.RigType == Enum.HumanoidRigType.R15 and "UpperTorso" or "Torso"
                local torso = character:FindFirstChild(torsoName)
                local head = character:FindFirstChild("Head")

                if torso and head then
                    local height = (head.Position - torso.Position).Magnitude * 2.5
                    local width = math.max(head.Size.X, torso.Size.X) * 2
                    local depth = width * 0.6

                    local cf = rootPart.CFrame
                    local size = Vector3.new(width, height, depth)

                    -- Get all 8 corners of the 3D box
                    local corners = {
                        cf * CFrame.new(size.X/2, size.Y/2, size.Z/2).Position,
                        cf * CFrame.new(-size.X/2, size.Y/2, size.Z/2).Position,
                        cf * CFrame.new(-size.X/2, -size.Y/2, size.Z/2).Position,
                        cf * CFrame.new(size.X/2, -size.Y/2, size.Z/2).Position,
                        cf * CFrame.new(size.X/2, size.Y/2, -size.Z/2).Position,
                        cf * CFrame.new(-size.X/2, size.Y/2, -size.Z/2).Position,
                        cf * CFrame.new(-size.X/2, -size.Y/2, -size.Z/2).Position,
                        cf * CFrame.new(size.X/2, -size.Y/2, -size.Z/2).Position
                    }

                    -- Define edges (pairs of point indices)
                    local edges = {
                        -- Front face
                        {1, 2}, {2, 3}, {3, 4}, {4, 1},
                        -- Back face
                        {5, 6}, {6, 7}, {7, 8}, {8, 5},
                        -- Connecting edges
                        {1, 5}, {2, 6}, {3, 7}, {4, 8}
                    }

                    -- Draw all edges
                    for _, edge in ipairs(edges) do
                        local line = Draw3DLine(
                            corners[edge[1]],
                            corners[edge[2]],
                            GetPlayerColor(plr, "Box"),
                            ESP_SETTINGS.Components.Box.Thickness,
                            skeleton.ParentGui
                        )
                        table.insert(skeleton.Drawing, line)
                    end
                end
            end
        end
    end

    -- Name and distance
    if ESP_SETTINGS.Components.Name.Enabled then
        local head = character:FindFirstChild("Head")
        if head then
            local visible = not ESP_SETTINGS.Components.Name.VisibleOnly or IsPartVisible(head, character)
            
            if visible then
                local distanceText = ""
                if ESP_SETTINGS.Components.Name.ShowDistance then
                    local distance = (head.Position - Camera.CFrame.Position).Magnitude
                    distanceText = string.format(" [%d]", math.floor(distance))
                end

                local textPos = ESP_SETTINGS.Components.Name.Offset
                local offset = head.CFrame:VectorToWorldSpace(textPos)
                
                local billboard = Draw3DText(
                    plr.Name .. distanceText,
                    textPos,
                    GetPlayerColor(plr, "Name"),
                    ESP_SETTINGS.Components.Name.Size,
                    skeleton.ParentGui
                )
                
                table.insert(skeleton.Drawing, {Billboard = billboard})
            end
        end
    end
end

-- Player tracking
local function TrackPlayer(plr)
    if plr == LocalPlayer then return end

    local skeleton = {
        Drawing = {}
    }
    Skeletons[plr] = skeleton

    local connection
    connection = RunService.Heartbeat:Connect(function()
        UpdateSkeleton(plr, skeleton)
    end)

    plr.AncestryChanged:Connect(function(_, parent)
        if not parent then
            connection:Disconnect()
            if skeleton.ParentGui then
                skeleton.ParentGui:Destroy()
            end
            Skeletons[plr] = nil
        end
    end)
end

-- API
function ESP:Toggle(state)
    ESP_SETTINGS.Enabled = state
    self:UpdateAll()
end

function ESP:ToggleSkeleton(state)
    ESP_SETTINGS.Components.Skeleton.Enabled = state
    self:UpdateAll()
end

function ESP:ToggleNames(state)
    ESP_SETTINGS.Components.Name.Enabled = state
    self:UpdateAll()
end

function ESP:ToggleBox(state)
    ESP_SETTINGS.Components.Box.Enabled = state
    self:UpdateAll()
end

function ESP:SetSkeletonColor(color)
    ESP_SETTINGS.Components.Skeleton.Color = color
    self:UpdateAll()
end

function ESP:SetNameColor(color)
    ESP_SETTINGS.Components.Name.Color = color
    self:UpdateAll()
end

function ESP:SetBoxColor(color)
    ESP_SETTINGS.Components.Box.Color = color
    self:UpdateAll()
end

function ESP:UpdateAll()
    for plr, skeleton in pairs(Skeletons) do
        UpdateSkeleton(plr, skeleton)
    end
end

-- Initialization
Players.PlayerAdded:Connect(TrackPlayer)
Players.PlayerRemoving:Connect(function(plr)
    local skeleton = Skeletons[plr]
    if skeleton and skeleton.ParentGui then
        skeleton.ParentGui:Destroy()
    end
    Skeletons[plr] = nil
end)

for _, plr in ipairs(Players:GetPlayers()) do
    TrackPlayer(plr)
end

return ESP
